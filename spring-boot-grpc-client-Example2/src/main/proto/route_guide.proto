// it must be placed in proto folder (case sensitive)

// define the package we want to use for our generated Java classes
syntax = "proto3";
option java_multiple_files = true;
option java_package = "route_guide";

// Our RouteGuide Service Definition
service RouteGuide{

  // A simple RPC where the client sends a request to the server using the stub
  // and waits for a response to come back, just like a normal function call.
  rpc GetFeature(Point) returns (Feature) {}

  //  Server-side streaming RPC where the client sends a request to the server
  //  and gets a stream to read a sequence of messages back. The client reads from the
  //  returned stream until there are no more messages
  rpc ListFeatures (Rectangle) returns (stream Feature) {}

  //  A client-side streaming RPC where the client writes a sequence of messages
  //  and sends them to the server, again using a provided stream. Once the client has
  //  finished writing the messages, it waits for the server to read them all and return
  //  its response.
  //  Accepts a stream of Points on a route being traversed, returning a
  //  RouteSummary when traversal is completed.
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  //  A bidirectional streaming RPC where both sides send a sequence of messages using a read-write stream
  //  The two streams operate independently, so clients and servers can read and write in whatever order
  //  they like: for example, the server could wait to receive all the client messages before writing its responses, or it could alternately read a message then write a message, or some other combination of reads and writes. The order of messages in each stream is preserved.
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}

}

// Latitudes should be in the range +/- 90 degrees and longitude should be in the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite  points "lo" and "hi" (Corners).
message Rectangle {
  Point lo = 1;
  Point hi = 2;
}

// A feature names something at a given point. If a feature could not be named, the name is empty.
message Feature {
  string name = 1;
  Point location = 2;
}

// Not used in the RPC.  Instead, this is here for the form serialized to disk.
message FeatureDatabase {
  repeated Feature feature = 1;
}

// A RouteNote is a message sent while at a given point. The location from which the message is sent.
message RouteNote {
  Point location = 1;
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
// It contains the number of individual points received, the number of detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  int32 point_count = 1;
  int32 feature_count = 2;
  int32 distance = 3;
  int32 elapsed_time = 4;
}

// for compilation use mvn compile after pressing ctrl twice